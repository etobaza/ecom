services:
  d1:
    build:
      context: ./ecom
      dockerfile: dockerfile
    container_name: d1
    ports:
      - "8001:8001"
    environment:
      - DJANGO_DEBUG=1
      - DATABASE_URL=postgres://myuser:mypassword@db:5432/mydb
      - DATABASE_WINGMAN_URL=postgres://loaylwingman:passwingman@db:5433/mydb
      - REDIS_URL=redis://redis:6379/1
      - REDIS_TASKS_URL=redis://redis:6379/0
    command: gunicorn ecom.wsgi:application --bind 0.0.0.0:8001
    entrypoint:
      [
        "sh",
        "-c",
        "python3 manage.py migrate && gunicorn ecom.wsgi:application --bind 0.0.0.0:8001",
      ]
    depends_on:
      - db
      - db_wingman
      - redis
    networks:
      - monitoring

  d2:
    build:
      context: ./ecom
      dockerfile: dockerfile
    container_name: d2
    ports:
      - "8002:8002"
    environment:
      - DJANGO_DEBUG=1
      - DATABASE_URL=postgres://myuser:mypassword@db:5432/mydb
      - DATABASE_WINGMAN_URL=postgres://loyalwingman:passwingman@db:5433/mydb
      - REDIS_URL=redis://redis:6379/1
      - REDIS_TASKS_URL=redis://redis:6379/0
    command: gunicorn ecom.wsgi:application --bind 0.0.0.0:8002
    depends_on:
      - db
      - db_wingman
      - redis
      - d1
    networks:
      - monitoring

  d3:
    build:
      context: ./ecom
      dockerfile: dockerfile
    container_name: d3
    ports:
      - "8003:8003"
    environment:
      - DJANGO_DEBUG=1
      - DATABASE_URL=postgres://myuser:mypassword@db:5432/mydb
      - DATABASE_WINGMAN_URL=postgres://loyalwingman:passwingman@db:5433/mydb
      - REDIS_URL=redis://redis:6379/1
      - REDIS_TASKS_URL=redis://redis:6379/0
    command: gunicorn ecom.wsgi:application --bind 0.0.0.0:8003
    depends_on:
      - db
      - db_wingman
      - redis
      - d1
    networks:
      - monitoring

  nginx:
    build:
      context: ./nginx
      dockerfile: dockerfile
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - d1
      - d2
      - d3
    networks:
      - monitoring

  db:
    image: postgres:13
    container_name: db
    command:
      [
        "postgres",
        "-c",
        "config_file=/etc/postgresql.conf",
        "-c",
        "hba_file=/etc/pg_hba.conf",
      ]
    environment:
      POSTGRES_DB: mydb
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db_config/postgresql.conf:/etc/postgresql.conf
      - ./db_config/pg_hba.conf:/etc/pg_hba.conf
    ports:
      - "5432:5432"
    networks:
      - monitoring

  db_wingman:
    image: postgres:13
    container_name: db_wingman
    environment:
      POSTGRES_DB: mydb
      POSTGRES_USER: loyalwingman
      POSTGRES_PASSWORD: passwingman
    volumes:
      - wingman_db_data:/var/lib/postgresql/data
    depends_on:
      - db
    ports:
      - "5433:5432"
    networks:
      - monitoring
    command: >
      sh -c "rm -rf /var/lib/postgresql/data/* &&
            chmod 700 /var/lib/postgresql/data &&
            until pg_isready -h db -p 5432; do sleep 1; done;
            su postgres -c 'PGPASSWORD=mypassword pg_basebackup -h db -D /var/lib/postgresql/data -U myuser -vP --wal-method=stream' &&
            su postgres -c postgres"

  db_wingman2:
    image: postgres:13
    container_name: db_wingman2
    environment:
      POSTGRES_DB: mydb
      POSTGRES_USER: loyalwingman2
      POSTGRES_PASSWORD: passwingman2
    volumes:
      - wingman_db_data2:/var/lib/postgresql/data
    depends_on:
      - db
    ports:
      - "5434:5432"
    networks:
      - monitoring
    command: >
      sh -c "rm -rf /var/lib/postgresql/data/* &&
            chmod 700 /var/lib/postgresql/data &&
            until pg_isready -h db -p 5432; do sleep 1; done;
            su postgres -c 'PGPASSWORD=mypassword pg_basebackup -h db -D /var/lib/postgresql/data -U myuser -vP --wal-method=stream' &&
            su postgres -c postgres"

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - monitoring

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - monitoring

networks:
  monitoring:
    driver: bridge

volumes:
  db_data:
  wingman_db_data:
  wingman_db_data2:
  redis_data:
